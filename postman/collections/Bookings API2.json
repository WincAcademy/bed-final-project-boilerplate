{
  "info": {
    "_postman_id": "1fd98abe-99ae-40df-b1ab-f22837669b17",
    "name": "Bookings API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "37589370",
    "_collection_link": "https://restaurant-app-6055.postman.co/workspace/New-Team-Workspace~763775e8-83d1-4e5d-8ff7-3fec2437bfd9/collection/37589370-1fd98abe-99ae-40df-b1ab-f22837669b17?action=share&source=collection_link&creator=37589370"
  },
  "item": [
    {
      "name": "login",
      "item": [
        {
          "name": "login",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n     \"username\": \"jdoe\",\r\n     \"password\": \"password123\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://localhost:3000/login",
              "protocol": "http",
              "host": ["localhost"],
              "port": "3000",
              "path": ["login"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "positive-tests",
      "item": [
        {
          "name": "users",
          "item": [
            {
              "name": "Get all users",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Each user has expected fields\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "\r",
                      "    jsonData.forEach(user => {\r",
                      "        pm.expect(user).to.have.property(\"id\");\r",
                      "        pm.expect(user).to.have.property(\"username\");\r",
                      "        pm.expect(user).to.have.property(\"name\");\r",
                      "        pm.expect(user).to.have.property(\"email\");\r",
                      "        pm.expect(user).to.have.property(\"phoneNumber\");\r",
                      "        pm.expect(user).to.have.property(\"pictureUrl\");\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:3000/users",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["users"],
                  "query": [
                    {
                      "key": "username",
                      "value": "jdoe",
                      "disabled": true
                    },
                    {
                      "key": "email",
                      "value": "johndoe@example.com",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Post create user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Check of response status 201 is (Created)\r",
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// Check of response body een object is\r",
                      "pm.test(\"Response is an object\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// Check of de juiste velden terugkomen\r",
                      "pm.test(\"User has expected fields\", function () {\r",
                      "    const user = pm.response.json();\r",
                      "\r",
                      "    pm.expect(user).to.have.property(\"id\");\r",
                      "    pm.expect(user).to.have.property(\"username\", \"elvm\");\r",
                      "    pm.expect(user).to.have.property(\"name\", \"El Vermeer\");\r",
                      "    pm.expect(user).to.have.property(\"email\", \"el.vermeer@example.com\");\r",
                      "    pm.expect(user).to.have.property(\"phoneNumber\", \"0612345678\");\r",
                      "    pm.expect(user).to.have.property(\"pictureUrl\", \"http://dummyurl.com\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2Mzg3MzV9.RwzpjNWIfx2ck2rVatXmDABc3RCOHfy53FkVpKmNlQU",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"email\": \"el.vermeer@example.com\",\r\n  \"name\": \"El Vermeer\",\r\n  \"password\": \"Xv93LpzQ0eWm1ka\",\r\n  \"phoneNumber\": \"0612345678\",\r\n  \"pictureUrl\": \"http://dummyurl.com\",\r\n  \"username\": \"elvm\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/users",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["users"]
                }
              },
              "response": []
            },
            {
              "name": "Get user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test for status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:3000/users/a1234567-89ab-cdef-0123-456789abcdef",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["users", "a1234567-89ab-cdef-0123-456789abcdef"]
                }
              },
              "response": []
            },
            {
              "name": "Put update user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM0NjgxMDF9._QCw5gCJc8BRwCPaGSoGoCBrke9ZJiGyeadPNiDOjRk",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"username\": \"jdoe-updated-name\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/users/a1234567-89ab-cdef-0123-456789abcdef",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["users", "a1234567-89ab-cdef-0123-456789abcdef"]
                }
              },
              "response": []
            },
            {
              "name": "DELETE delete user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2Mzg3MzV9.RwzpjNWIfx2ck2rVatXmDABc3RCOHfy53FkVpKmNlQU",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "http://localhost:3000/users/a1234567-89ab-cdef-0123-456789abcdef",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["users", "a1234567-89ab-cdef-0123-456789abcdef"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "bookings",
          "item": [
            {
              "name": "Get all bookings",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    const jsonData = pm.response.json();\r",
                      "    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Elke booking bevat verplichte velden\", function () {\r",
                      "    const data = pm.response.json();\r",
                      "\r",
                      "    data.forEach(booking => {\r",
                      "        pm.expect(booking).to.have.property(\"id\");\r",
                      "        pm.expect(booking).to.have.property(\"bookingStatus\");\r",
                      "        pm.expect(booking).to.have.property(\"checkinDate\");\r",
                      "        pm.expect(booking).to.have.property(\"checkoutDate\");\r",
                      "        pm.expect(booking).to.have.property(\"property\");\r",
                      "        pm.expect(booking.property).to.have.property(\"title\");\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM1MzgyMTF9.nzkdXqD5MqmjDFNi5Dtu9q-9PRTT4OiDFKGhJyb0m2A",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "http://localhost:3000/bookings",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["bookings"],
                  "query": [
                    {
                      "key": "userId",
                      "value": "c3456789-01de-f012-3456-789abcdef012",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Post create booking",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 201 Created\", function () {\r",
                      "    pm.response.to.have.status(201); \r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM1MzgyMTF9.nzkdXqD5MqmjDFNi5Dtu9q-9PRTT4OiDFKGhJyb0m2A",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"bookingStatus\": \"confirmed\",\r\n  \"checkinDate\": \"2025-05-10T15:00:00.000Z\",\r\n  \"checkoutDate\": \"2025-05-14T10:00:00.000Z\",\r\n  \"numberOfGuests\": 4,\r\n  \"propertyId\": \"i1234567-89f0-1234-5678-9abcdef01234\",\r\n  \"totalPrice\": 240,\r\n  \"userId\": \"c3456789-01de-f012-3456-789abcdef012\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/bookings",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["bookings"]
                }
              },
              "response": []
            },
            {
              "name": "Delete delete booking",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM1MzgyMTF9.nzkdXqD5MqmjDFNi5Dtu9q-9PRTT4OiDFKGhJyb0m2A",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "http://localhost:3000/bookings/c4567890-12cd-ef01-2345-6789abcdef01",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["bookings", "c4567890-12cd-ef01-2345-6789abcdef01"]
                }
              },
              "response": []
            },
            {
              "name": "get booking by id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Booking bevat alle verwachte keys\", function () {\r",
                      "    const expectedKeys = [\r",
                      "        \"id\",\r",
                      "        \"userId\",\r",
                      "        \"propertyId\",\r",
                      "        \"checkinDate\",\r",
                      "        \"checkoutDate\",\r",
                      "        \"totalPrice\",\r",
                      "        \"bookingStatus\",\r",
                      "        \"numberOfGuests\"\r",
                      "    ];\r",
                      "\r",
                      "    expectedKeys.forEach(key => {\r",
                      "        pm.expect(pm.response.json()).to.have.property(key);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:3000/bookings/e2345678-90ab-cdef-0123-456789abcdef",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["bookings", "e2345678-90ab-cdef-0123-456789abcdef"]
                }
              },
              "response": []
            },
            {
              "name": "Put update booking",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM1MzgyMTF9.nzkdXqD5MqmjDFNi5Dtu9q-9PRTT4OiDFKGhJyb0m2A",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"bookingStatus\": \"canceled\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/bookings/e2345678-90ab-cdef-0123-456789abcdef",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["bookings", "e2345678-90ab-cdef-0123-456789abcdef"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "amenities",
          "item": [
            {
              "name": "get amenities",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:3000/amenities",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["amenities"]
                }
              },
              "response": []
            },
            {
              "name": "get amenity",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "// Test for status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:3000/amenities/r0123456-78op-qrst-789a-bcdef0123456",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["amenities", "r0123456-78op-qrst-789a-bcdef0123456"]
                }
              },
              "response": []
            },
            {
              "name": "Post create amenity",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test for status code\r",
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2Mjk4NzN9.QE28hVTD2rDH9FmHLa8k0Io1zp0WwZT646n8OwPntYo",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "  {\r\n        \"name\": \"5G-blazing-fast-internet\",\r\n        \"properties\": []\r\n    }",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/amenities",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["amenities"]
                }
              },
              "response": []
            },
            {
              "name": "Delete amenity",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "//Fixed the ReferenceError by removing 'test'\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response body has a message property\", function () {\r",
                      "    const res = pm.response.json();\r",
                      "    pm.expect(res).to.have.property(\"message\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2Mjk4NzN9.QE28hVTD2rDH9FmHLa8k0Io1zp0WwZT646n8OwPntYo",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "http://localhost:3000/amenities/q9012345-67no-pqrs-6789-abcdef012345",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["amenities", "q9012345-67no-pqrs-6789-abcdef012345"]
                }
              },
              "response": []
            },
            {
              "name": "Update amenity",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "// Test for status code\r",
                      "pm.test('Status code is 200', function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "// Test for response time\r",
                      "\r",
                      "\r",
                      "// Test for response body properties\r",
                      "pm.test(\"Response body has message property\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('message');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2Mjk4NzN9.QE28hVTD2rDH9FmHLa8k0Io1zp0WwZT646n8OwPntYo",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"5G-blazing-fast-wifi\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/amenities/t2345678-90qr-stuv-90bc-def012345678",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["amenities", "t2345678-90qr-stuv-90bc-def012345678"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "hosts",
          "item": [
            {
              "name": "Get hosts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "// Test for status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "// Test for response body properties\r",
                      "pm.test(\"Response body has 'id', 'aboutMe', 'email', 'listings', 'name', 'phoneNumber', 'pictureUrl', and 'username' properties for each host\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "    pm.response.json().forEach(function (host) {\r",
                      "        pm.expect(host).to.have.property('id');\r",
                      "        pm.expect(host).to.have.property('aboutMe');\r",
                      "        pm.expect(host).to.have.property('email');\r",
                      "        pm.expect(host).to.have.property('listings');\r",
                      "        pm.expect(host).to.have.property('name');\r",
                      "        pm.expect(host).to.have.property('phoneNumber');\r",
                      "        pm.expect(host).to.have.property('pictureUrl');\r",
                      "        pm.expect(host).to.have.property('username');\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:3000/hosts",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["hosts"],
                  "query": [
                    {
                      "key": "name",
                      "value": "Linda+smith",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get host by id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "// Test for status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "\r",
                      "\r",
                      "// Test for response body properties\r",
                      "pm.test(\"Response body has the required properties\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('username');\r",
                      "    pm.expect(pm.response.json()).to.have.property('name');\r",
                      "    pm.expect(pm.response.json()).to.have.property('email');\r",
                      "    pm.expect(pm.response.json()).to.have.property('phoneNumber');\r",
                      "    pm.expect(pm.response.json()).to.have.property('pictureUrl');\r",
                      "    pm.expect(pm.response.json()).to.have.property('aboutMe');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:3000/hosts/b5678901-23ef-0123-4567-89abcdef0123",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["hosts", "b5678901-23ef-0123-4567-89abcdef0123"]
                }
              },
              "response": []
            },
            {
              "name": "Post create host",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response body should have an id\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('id');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body should have a username\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('username');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body should have a password\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('password');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body should have a name\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('name');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body should have an email\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('email');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body should have a phoneNumber\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('phoneNumber');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body should have a pictureUrl\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('pictureUrl');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body should have an aboutMe\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('aboutMe');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2Mjk4NzN9.QE28hVTD2rDH9FmHLa8k0Io1zp0WwZT646n8OwPntYo",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n        \"aboutMe\": \"Some regular job.\",\r\n        \"email\": \"someregulair2@email.com\",\r\n        \"name\": \"Regular Name2\",\r\n        \"phoneNumber\": \"+15234567844\",\r\n        \"pictureUrl\": \"https://example.com/images/regularname.jpg\",\r\n        \"username\": \"regularUser2\",\r\n        \"password\": \"23131313\" \r\n    }",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/hosts",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["hosts"]
                }
              },
              "response": []
            },
            {
              "name": "Delete host",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2Mjk4NzN9.QE28hVTD2rDH9FmHLa8k0Io1zp0WwZT646n8OwPntYo",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "http://localhost:3000/hosts/f1234567-89ab-cdef-0123-456789abcdef",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["hosts", "f1234567-89ab-cdef-0123-456789abcdef"]
                }
              },
              "response": []
            },
            {
              "name": "Update  host",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Updated aboutMe field in the response body\", function () {\r",
                      "    pm.expect(pm.response.json().message).to.contain(\"Host with id b5678901-23ef-0123-4567-89a\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzQ4NjV9.JvKf3tfXkA3h9cairw2bxDso-FOEldhysf5VxZEgFgQ",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"aboutMe\": \"Updated about me\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/hosts/b5678901-23ef-0123-4567-89abcdef0123",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["hosts", "b5678901-23ef-0123-4567-89abcdef0123"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "reviews",
          "item": [
            {
              "name": "get reviews",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "// Test for status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:3000/reviews",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["reviews"]
                }
              },
              "response": []
            },
            {
              "name": "get review by id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "// Test for status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "\r",
                      "\r",
                      "// Test for response body properties\r",
                      "pm.test(\"Response body has the correct properties\", function () {\r",
                      "    pm.response.to.have.jsonBody('id');\r",
                      "    pm.response.to.have.jsonBody('userId');\r",
                      "    pm.response.to.have.jsonBody('propertyId');\r",
                      "    pm.response.to.have.jsonBody('rating');\r",
                      "    pm.response.to.have.jsonBody('comment');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:3000/reviews/j0123456-78f0-1234-5678-9abcdef01234",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["reviews", "j0123456-78f0-1234-5678-9abcdef01234"]
                }
              },
              "response": []
            },
            {
              "name": "Put create review",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Test for status code\r",
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "\r",
                      "// Test for response body properties\r",
                      "pm.test(\"Response has an id\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('id');\r",
                      "});\r",
                      "pm.test(\"Response has a userId\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('userId');\r",
                      "});\r",
                      "pm.test(\"Response has a propertyId\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('propertyId');\r",
                      "});\r",
                      "pm.test(\"Response has a rating\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('rating');\r",
                      "});\r",
                      "pm.test(\"Response has a comment\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('comment');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"userId\": \"c3456789-01de-f012-3456-789abcdef012\",\r\n    \"propertyId\": \"g9012345-67ef-0123-4567-89abcdef0123\",\r\n    \"rating\": 5,\r\n    \"comment\": \"Test comment!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/reviews",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["reviews"]
                }
              },
              "response": []
            },
            {
              "name": "Update review",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Content type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"comment\": \"Updated comment!\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/reviews/j0123456-78f0-1234-5678-9abcdef01234",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["reviews", "j0123456-78f0-1234-5678-9abcdef01234"]
                }
              },
              "response": []
            },
            {
              "name": "Delete review",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/reviews/j0123456-78f0-1234-5678-9abcdef01234",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["reviews", "j0123456-78f0-1234-5678-9abcdef01234"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "properties",
          "item": [
            {
              "name": "get properties",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "// Test for status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "\r",
                      "\r",
                      "// Test for response body schema and properties\r",
                      "pm.test(\"Response body is an array\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Each property has the required fields\", function () {\r",
                      "    pm.response.json().forEach((property) => {\r",
                      "        pm.expect(property).to.have.property('id');\r",
                      "        pm.expect(property).to.have.property('title');\r",
                      "        pm.expect(property).to.have.property('description');\r",
                      "        pm.expect(property).to.have.property('location');\r",
                      "        pm.expect(property).to.have.property('pricePerNight');\r",
                      "        pm.expect(property).to.have.property('rating');\r",
                      "        pm.expect(property).to.have.property('maxGuestCount');\r",
                      "        pm.expect(property).to.have.property('host');\r",
                      "        pm.expect(property).to.have.property('bookings');\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:3000/properties",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["properties"],
                  "query": [
                    {
                      "key": "location",
                      "value": "Malibu, California",
                      "disabled": true
                    },
                    {
                      "key": "pricePerNight",
                      "value": "310.25",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get property",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "// Test for status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "// Test for response body properties\r",
                      "pm.test(\"Response body has the required properties\", function () {\r",
                      "    pm.expect(pm.response.json()).to.have.property('id');\r",
                      "    pm.expect(pm.response.json()).to.have.property('hostId');\r",
                      "    pm.expect(pm.response.json()).to.have.property('title');\r",
                      "    pm.expect(pm.response.json()).to.have.property('description');\r",
                      "    pm.expect(pm.response.json()).to.have.property('location');\r",
                      "    pm.expect(pm.response.json()).to.have.property('pricePerNight');\r",
                      "    pm.expect(pm.response.json()).to.have.property('bedroomCount');\r",
                      "    pm.expect(pm.response.json()).to.have.property('bathRoomCount');\r",
                      "    pm.expect(pm.response.json()).to.have.property('maxGuestCount');\r",
                      "    pm.expect(pm.response.json()).to.have.property('rating');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "http://localhost:3000/properties/h0123456-78f0-1234-5678-9abcdef01234",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["properties", "h0123456-78f0-1234-5678-9abcdef01234"]
                }
              },
              "response": []
            },
            {
              "name": "Post create property",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Content type is application/json\", function () {\r",
                      "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Verify the property ID in the response\", function () {\r",
                      "    pm.expect(pm.response.json().id).to.exist;\r",
                      "    pm.expect(pm.response.json().id).to.be.a('string');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the property title in the response\", function () {\r",
                      "    pm.expect(pm.response.json().title).to.equal(\"Super retreat\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the property location in the response\", function () {\r",
                      "    pm.expect(pm.response.json().location).to.equal(\"Leiden\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the property price per night in the response\", function () {\r",
                      "    pm.expect(pm.response.json().pricePerNight).to.equal(\"120.5\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the bedroom count in the response\", function () {\r",
                      "    pm.expect(pm.response.json().bedroomCount).to.equal(3);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the bathroom count in the response\", function () {\r",
                      "    pm.expect(pm.response.json().bathRoomCount).to.equal(2);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the maximum guest count in the response\", function () {\r",
                      "    pm.expect(pm.response.json().maxGuestCount).to.equal(5);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Verify the rating in the response\", function () {\r",
                      "    pm.expect(pm.response.json().rating).to.equal(5);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"hostId\": \"f1234567-89ab-cdef-0123-456789abcdef\",\r\n    \"title\": \"Super retreat\",\r\n    \"description\": \"Awesome.\",\r\n    \"location\": \"Leiden\",\r\n    \"pricePerNight\": \"120.5\",\r\n    \"bedroomCount\": 3,\r\n    \"bathRoomCount\": 2,\r\n    \"maxGuestCount\": 5,\r\n    \"rating\": 5\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/properties",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["properties"]
                }
              },
              "response": []
            },
            {
              "name": "Delete delete property",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "http://localhost:3000/properties/k3456789-01f2-3456-789a-bcdef0123456",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": ["properties", "k3456789-01f2-3456-789a-bcdef0123456"]
                }
              },
              "response": []
            },
            {
              "name": "Update property",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response body has a message field\", function () {\r",
                      "    pm.response.to.have.jsonBody('message');\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"location\": \"Den haag\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "http://localhost:3000/properties/h0123456-78f0-1234-5678-9abcdef01234",
                  "protocol": "http",
                  "host": ["localhost"],
                  "port": "3000",
                  "path": [
                    "properties",
                    "h0123456-78f0-1234-5678-9abcdef01234"
                  ],
                  "query": [
                    {
                      "key": "",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "Authorizaiton",
      "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2Mjk4NzN9.QE28hVTD2rDH9FmHLa8k0Io1zp0WwZT646n8OwPntYo",
      "type": "string"
    }
  ]
}
