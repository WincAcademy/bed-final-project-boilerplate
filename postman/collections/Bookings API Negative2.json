{
	"info": {
		"_postman_id": "7857b8c8-6154-4feb-818f-9e1cf89ca978",
		"name": "Bookings API Negative",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37589370",
		"_collection_link": "https://restaurant-app-6055.postman.co/workspace/New-Team-Workspace~763775e8-83d1-4e5d-8ff7-3fec2437bfd9/collection/37589370-7857b8c8-6154-4feb-818f-9e1cf89ca978?action=share&source=collection_link&creator=37589370"
	},
	"item": [
		{
			"name": "negative-test",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Negative test case for checking if the response status code is not 404\r",
											"pm.test(\"Response status code is not 404\", function () {\r",
											"    pm.response.to.not.have.status(404);\r",
											"});\r",
											"\r",
											"// Negative test case for checking if the response body is not empty\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.response.to.not.be.empty;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Negative test case for status code\r",
											"\r",
											"// Negative test case for status code\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Response time is less than 1000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Your form is missing the required input\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM5NjQyODB9.9xizTi1nGpqTt0-_wgiVJPbEDS4ssNvE_TkS1OX_jLk",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"non-excisting-key\" : \"Non excisting value\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user - non excisting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response message is 'Resource not found'\", function () {\r",
											"    pm.expect(pm.response.json().message).to.equal(\"Resource not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/users/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put update user - with usernam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"    pm.response.to.have.jsonBody({\r",
											"        \"message\": \"Resource not found\"\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM0NjgxMDF9._QCw5gCJc8BRwCPaGSoGoCBrke9ZJiGyeadPNiDOjRk",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"usernam\": \"jdoe-updated-name\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/users/a1234567-89ab-cdef-0123-456789abcdef",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"a1234567-89ab-cdef-0123-456789abcdef"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE delete user - without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has message field\", function () {\r",
											"    pm.expect(pm.response.json().message).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/users/5879ee66-6154-444b-82d3-9a07e06d7909",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"5879ee66-6154-444b-82d3-9a07e06d7909"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "bookings",
					"item": [
						{
							"name": "Get all bookings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.text()).not.equal(\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"All check-out dates are after check-in dates\", function () {\r",
											"    pm.expect(pm.response.json().every(booking => new Date(booking.checkoutDate) > new Date(booking.checkinDate))).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"All total prices are greater than 0\", function () {\r",
											"    pm.expect(pm.response.json().every(booking => booking.totalPrice > 0)).to.be.true;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM1MzgyMTF9.nzkdXqD5MqmjDFNi5Dtu9q-9PRTT4OiDFKGhJyb0m2A",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/bookings",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"bookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post create booking - with wrong input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Your form is missing the required input\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM1MzgyMTF9.nzkdXqD5MqmjDFNi5Dtu9q-9PRTT4OiDFKGhJyb0m2A",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"bookingStatus\": \"confirmed\",\r\n  \"checkinDate\": \"2025-05-10T15:00:00.000Z\",\r\n  \"checkoutDate\": \"2025-05-14T10:00:00.000Z\",\r\n  \"numberOfGuests\": 4,\r\n  \"propertyId\": \"i1234567-89f0-1234-5678-9abcdef01234\",\r\n  \"totalPric\": 240,\r\n  \"userId\": \"c3456789-01de-f012-3456-789abcdef012\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/bookings",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"bookings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete delete booking - not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Negative test case for status code 404\r",
											"\r",
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Response should contain a message property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/bookings/e1c3ea56-9249-43f8-8a0b-cf7cc162ed18",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"bookings",
										"e1c3ea56-9249-43f8-8a0b-cf7cc162ed18"
									]
								}
							},
							"response": []
						},
						{
							"name": "get booking by id - resource not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed the ReferenceError: test is not defined\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has the correct message\", function () {\r",
											"    pm.expect(pm.response.json().message).to.equal(\"Resource not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/bookings/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"bookings",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put update booking",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Test Case 1: Verify the response status code is 404\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Test Case 2: Verify the response time is less than 20ms\r",
											"\r",
											"\r",
											"// Test Case 3: Verify the content type is 'text/html'\r",
											"pm.test(\"Content type is text/html\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/html\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM1MzgyMTF9.nzkdXqD5MqmjDFNi5Dtu9q-9PRTT4OiDFKGhJyb0m2A",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bookingStatus\": \"canceled\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/bookings",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"bookings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "amenities",
					"item": [
						{
							"name": "get amenities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Negative test case for checking if the response body is not empty\r",
											"pm.test(\"Response body should not be empty\", function () {\r",
											"    pm.expect(pm.response.json()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// Negative test case for checking if the response code is not 404\r",
											"pm.test(\"Response code should not be 404\", function () {\r",
											"    pm.expect(pm.response.code).to.not.equal(404);\r",
											"});\r",
											"\r",
											"// Negative test case for checking if the response time is less than 2000ms\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/amenities",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"amenities"
									]
								}
							},
							"response": []
						},
						{
							"name": "get amenity - non excisting id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed ReferenceError: test is not defined\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has a message field with value 'Resource not found'\", function () {\r",
											"    pm.expect(pm.response.json().message).to.equal(\"Resource not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/amenities/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"amenities",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post create amenity - no token provided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Negative test case for status code\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Negative test case for response body message\r",
											"pm.test(\"Response body contains message\", function () {\r",
											"    pm.response.to.have.jsonBody(\"message\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n        \"name\": \"5G-blazing-fast-internet\",\r\n        \"properties\": []\r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/amenities",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"amenities"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete amenity - non excisting id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has the correct message for resource not found\", function () {\r",
											"    pm.expect(pm.response.json().message).to.equal(\"Resource not found\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2Mjk4NzN9.QE28hVTD2rDH9FmHLa8k0Io1zp0WwZT646n8OwPntYo",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/amenities/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"amenities",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update amenity - non excisting property name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Negative test case for status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Negative test case for response body message\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    pm.expect(pm.response.json().message).to.equal(\"Resource not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2Mjk4NzN9.QE28hVTD2rDH9FmHLa8k0Io1zp0WwZT646n8OwPntYo",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nam\": \"5G-blazing-fast-wifi\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/amenities/40ab9c20-364c-4992-bcef-722f4097fde0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"amenities",
										"40ab9c20-364c-4992-bcef-722f4097fde0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "hosts",
					"item": [
						{
							"name": "Get hosts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Negative test case for status code\r",
											"pm.test(\"Status code is not 404\", function () {\r",
											"    pm.response.to.not.be.status(404);\r",
											"});\r",
											"\r",
											"// Negative test case for response time\r",
											"\r",
											"// Negative test case for response body\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.json()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// Negative test case for response content type\r",
											"pm.test(\"Content type is not text/html\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(\"text/html\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/hosts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get host by id - non excisting id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body has message: Resource not found\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Resource not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/hosts/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"hosts",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post create host - no JWT token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body contains error message\", function () {\r",
											"    pm.expect(pm.response.json().message).to.exist;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n        \"aboutMe\": \"Some regular job.\",\r\n        \"email\": \"someregulair@email.com\",\r\n        \"name\": \"Regular Name\",\r\n        \"phoneNumber\": \"+15234567843\",\r\n        \"pictureUrl\": \"https://example.com/images/regularname.jpg\",\r\n        \"username\": \"regularUser\",\r\n        \"password\": \"23131313\" \r\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/hosts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"hosts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete host - non excisting id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Negative test case for status code\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"// Negative test case for response body message\r",
											"pm.test(\"Response contains message: Resource not found\", function () {\r",
											"    pm.expect(pm.response.json().message).to.equal(\"Resource not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2Mjk4NzN9.QE28hVTD2rDH9FmHLa8k0Io1zp0WwZT646n8OwPntYo",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/hosts/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"hosts",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  host - wrong property in body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body has message field with value 'Resource not found'\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Resource not found\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body has content type 'application/json'\", function () {\r",
											"    pm.expect(pm.response).to.have.header('Content-Type', 'application/json; charset=utf-8');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzQ4NjV9.JvKf3tfXkA3h9cairw2bxDso-FOEldhysf5VxZEgFgQ",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"aboutM\": \"Updated about me\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/hosts/e9eb32c2-29e2-4ad3-b51d-fdf5f263b5ec",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"hosts",
										"e9eb32c2-29e2-4ad3-b51d-fdf5f263b5ec"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "reviews",
					"item": [
						{
							"name": "get reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is not 404\", function () {\r",
											"    pm.response.to.not.be.status(404);\r",
											"});\r",
											"\r",
											"// Negative test case for response time\r",
											"\r",
											"// Negative test case for response body\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.json()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// Negative test case for response content type\r",
											"pm.test(\"Content type is not text/html\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(\"text/html\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/reviews",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "get reviews by id - non excisting id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body has message: Resource not found\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Resource not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/reviews/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"reviews",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put create review - wrong form properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userI\": \"a1234567-89ab-cdef-0123-456789abcdef\",\r\n    \"propertyI\": \"g9012345-67ef-0123-4567-89abcdef0123\",\r\n    \"rating\": 5,\r\n    \"comment\": \"Test comment!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/reviews",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update review - non excisting id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)} )\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"comment\": \"Updated comment!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/reviews/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"reviews",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete review - non excisting id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)} )\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/reviews/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"reviews",
										"99"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "properties",
					"item": [
						{
							"name": "get properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// Negative test case for status code\r",
											"pm.test(\"Status code is not 404\", function () {\r",
											"    pm.response.to.not.be.status(404);\r",
											"});\r",
											"\r",
											"// Negative test case for response time\r",
											"\r",
											"// Negative test case for response body\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    pm.expect(pm.response.json()).to.not.be.empty;\r",
											"});\r",
											"\r",
											"// Negative test case for response content type\r",
											"pm.test(\"Content type is not text/html\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.not.include(\"text/html\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/properties/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"properties",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get property - non excisting id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Response body has message: Resource not found\", function () {\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Resource not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/properties/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"properties",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Post create property - wrong form properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"hostId\": \"f1234567-89ab-cdef-0123-456789abcdef\",\r\n    \"title\": \"Super retreat\",\r\n    \"description\": \"Awesome.\",\r\n    \"location\": \"Leiden\",\r\n    \"pricePerNigh\": \"120.5\",\r\n    \"bedroomCount\": 3,\r\n    \"bathRoomCount\": 2,\r\n    \"maxGuestCount\": 5,\r\n    \"rating\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/properties",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete delete property - non excisting id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)} )\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/properties/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"properties",
										"99"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update property - non excisting id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404)} )\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJhMTIzNDU2Ny04OWFiLWNkZWYtMDEyMy00NTY3ODlhYmNkZWYiLCJpYXQiOjE3NDM2MzU3Nzl9.xUx1OTZ8l5PWsptA95-S8kke847U0zgz4T8bEAOHx4I",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"location\": \"Den haag\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/properties/99",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"properties",
										"99"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}