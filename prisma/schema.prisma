generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String
  name        String
  email       String
  phoneNumber String
  pictureUrl  String
  reviews     Review[]
  bookings    Booking[]
}

model Review {
  id         String    @id @default(uuid())
  userId     String
  propertyId String?
  rating     Int
  comment    String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([propertyId])
}

model Booking {
  id             String   @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  totalPrice     Int
  bookingStatus  String
  numberOfGuests Int
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property       Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([propertyId])
}

model Property {
  id            String    @id @default(uuid())
  hostId        String?
  title         String
  description   String
  location      String
  pricePerNight Decimal   @db.Decimal(10, 2)
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  rating        Int
  amenities     Amenity[]
  bookings      Booking[]
  reviews       Review[]
  host          Host?      @relation(fields: [hostId], references: [id], onDelete: Cascade)

  @@index([hostId])
}

model Amenity {
  id         String     @id @default(uuid())
  name       String
  properties Property[]
}

model Host {
  id          String     @id @default(uuid())
  username    String     @unique
  password    String
  name        String
  email       String
  phoneNumber String
  pictureUrl  String
  aboutMe     String
  listings    Property[]
}

model AmenityToProperty {
  A String
  B String

  @@unique([A, B], map: "_AmenityToProperty_AB_unique")
  @@index([B], map: "_AmenityToProperty_B_index")
  @@map("_AmenityToProperty")
}
